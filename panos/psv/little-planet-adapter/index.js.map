{"version":3,"sources":["@photo-sphere-viewer/core","three","src/index.ts","src/LittlePlanetAdapter.ts","src/shaders/littlePlanet.fragment.glsl","src/shaders/littlePlanet.vertex.glsl"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","import { DEFAULTS } from '@photo-sphere-viewer/core';\n\nDEFAULTS.defaultPitch = -Math.PI / 2;\n\nexport { LittlePlanetAdapter } from './LittlePlanetAdapter';\n","import type { EquirectangularAdapterConfig, Position, Size, TextureData, Viewer } from '@photo-sphere-viewer/core';\nimport { EquirectangularAdapter, events } from '@photo-sphere-viewer/core';\nimport { BufferGeometry, Euler, MathUtils, Matrix4, Mesh, PlaneGeometry, ShaderMaterial, Texture } from 'three';\nimport littlePlanetFragment from './shaders/littlePlanet.fragment.glsl';\nimport littlePlanetVertex from './shaders/littlePlanet.vertex.glsl';\n\ntype EquirectangularMesh = Mesh<BufferGeometry, ShaderMaterial>;\ntype EquirectangularTexture = TextureData<Texture, string>;\n\ntype ShaderUniforms = {\n    panorama: { value: Texture };\n    resolution: { value: number };\n    transform: { value: Matrix4 };\n    zoom: { value: number };\n    opacity: { value: number };\n};\n\nconst euler = new Euler();\n\n/**\n * Adapter for equirectangular panoramas displayed with little planet effect\n */\nexport class LittlePlanetAdapter extends EquirectangularAdapter {\n    static override readonly id = 'little-planet';\n    static override readonly VERSION = PKG_VERSION;\n    static override readonly supportsDownload = true;\n\n    private uniforms: ShaderUniforms;\n\n    constructor(viewer: Viewer, config?: EquirectangularAdapterConfig) {\n        super(viewer, config);\n\n        this.viewer.state.littlePlanet = true;\n    }\n\n    override init() {\n        super.init();\n\n        this.viewer.addEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n    }\n\n    override destroy(): void {\n        this.viewer.removeEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.ZoomUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.PositionUpdatedEvent.type, this);\n\n        super.destroy();\n    }\n\n    override supportsTransition() {\n        return false;\n    }\n\n    override supportsPreload() {\n        return true;\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.SizeUpdatedEvent) {\n            this.__setResolution(e.size);\n        } else if (e instanceof events.ZoomUpdatedEvent) {\n            this.__setZoom();\n        } else if (e instanceof events.PositionUpdatedEvent) {\n            this.__setPosition(e.position);\n        }\n    }\n\n    override createMesh(): EquirectangularMesh {\n        const geometry = new PlaneGeometry(20, 10).translate(0, 0, -1) as PlaneGeometry;\n\n        const material = new ShaderMaterial({\n            uniforms: {\n                panorama: { value: new Texture() },\n                resolution: { value: 2.0 },\n                transform: { value: new Matrix4() },\n                zoom: { value: 10.0 },\n                opacity: { value: 1.0 },\n            } as ShaderUniforms,\n            vertexShader: littlePlanetVertex,\n            fragmentShader: littlePlanetFragment,\n        });\n\n        this.uniforms = material.uniforms as ShaderUniforms;\n\n        return new Mesh(geometry, material);\n    }\n\n    override setTexture(mesh: EquirectangularMesh, textureData: EquirectangularTexture) {\n        mesh.material.uniforms.panorama.value.dispose();\n        mesh.material.uniforms.panorama.value = textureData.texture;\n    }\n\n    private __setResolution(size: Size) {\n        this.uniforms.resolution.value = size.width / size.height;\n    }\n\n    private __setZoom() {\n        // mapping values are empirical\n        this.uniforms.zoom.value = Math.max(0.1, MathUtils.mapLinear(this.viewer.state.vFov, 90, 30, 50, 2));\n    }\n\n    private __setPosition(position: Position) {\n        euler.set(Math.PI / 2 + position.pitch, 0, -Math.PI / 2 - position.yaw, 'ZYX');\n\n        this.uniforms.transform.value.makeRotationFromEuler(euler);\n    }\n}\n","// this one was copied from https://github.com/pchen66/panolens.js/blob/master/src/shaders/StereographicShader.js\n\nuniform sampler2D panorama;\nuniform float resolution;\nuniform mat4 transform;\nuniform float zoom;\nuniform float opacity;\n\nvarying vec2 vUv;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nvoid main() {\n    vec2 position = -1.0 + 2.0 * vUv;\n    position *= vec2( zoom * resolution, zoom * 0.5 );\n\n    float x2y2 = position.x * position.x + position.y * position.y;\n    vec3 sphere_pnt = vec3( 2. * position, x2y2 - 1. ) / ( x2y2 + 1. );\n    sphere_pnt = vec3( transform * vec4( sphere_pnt, 1.0 ) );\n\n    vec2 sampleUV = vec2(\n            1.0 - (atan(sphere_pnt.y, sphere_pnt.x) / PI + 1.0) * 0.5,\n            (asin(sphere_pnt.z) / PI + 0.5)\n    );\n\n    gl_FragColor = texture2D( panorama, sampleUV );\n    gl_FragColor.a *= opacity;\n}\n","varying vec2 vUv;\n\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4( position, 1.0 );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,aAAO,UAAU;AAAA;AAAA;;;ACAjB;AAAA;AAAA;AAAA,aAAO,UAAU;AAAA;AAAA;;;ACAjB;AAAA;AAAA;AAAA;AAAA,MAAAA,eAAyB;;;ACCzB,oBAA+C;AAC/C,qBAAwG;;;ACFxG;;;ACAA;;;AFiBA,MAAM,QAAQ,IAAI,mBAAM;AAKjB,MAAM,sBAAN,cAAkC,mCAAuB;AAAA,IAO5D,YAAY,QAAgB,QAAuC;AAC/D,YAAM,QAAQ,MAAM;AAEpB,WAAK,OAAO,MAAM,eAAe;AAAA,IACrC;AAAA,IAES,OAAO;AACZ,YAAM,KAAK;AAEX,WAAK,OAAO,iBAAiB,mBAAO,iBAAiB,MAAM,IAAI;AAC/D,WAAK,OAAO,iBAAiB,mBAAO,iBAAiB,MAAM,IAAI;AAC/D,WAAK,OAAO,iBAAiB,mBAAO,qBAAqB,MAAM,IAAI;AAAA,IACvE;AAAA,IAES,UAAgB;AACrB,WAAK,OAAO,oBAAoB,mBAAO,iBAAiB,MAAM,IAAI;AAClE,WAAK,OAAO,oBAAoB,mBAAO,iBAAiB,MAAM,IAAI;AAClE,WAAK,OAAO,oBAAoB,mBAAO,qBAAqB,MAAM,IAAI;AAEtE,YAAM,QAAQ;AAAA,IAClB;AAAA,IAES,qBAAqB;AAC1B,aAAO;AAAA,IACX;AAAA,IAES,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAKA,YAAY,GAAU;AAClB,UAAI,aAAa,mBAAO,kBAAkB;AACtC,aAAK,gBAAgB,EAAE,IAAI;AAAA,MAC/B,WAAW,aAAa,mBAAO,kBAAkB;AAC7C,aAAK,UAAU;AAAA,MACnB,WAAW,aAAa,mBAAO,sBAAsB;AACjD,aAAK,cAAc,EAAE,QAAQ;AAAA,MACjC;AAAA,IACJ;AAAA,IAES,aAAkC;AACvC,YAAM,WAAW,IAAI,2BAAc,IAAI,EAAE,EAAE,UAAU,GAAG,GAAG,EAAE;AAE7D,YAAM,WAAW,IAAI,4BAAe;AAAA,QAChC,UAAU;AAAA,UACN,UAAU,EAAE,OAAO,IAAI,qBAAQ,EAAE;AAAA,UACjC,YAAY,EAAE,OAAO,EAAI;AAAA,UACzB,WAAW,EAAE,OAAO,IAAI,qBAAQ,EAAE;AAAA,UAClC,MAAM,EAAE,OAAO,GAAK;AAAA,UACpB,SAAS,EAAE,OAAO,EAAI;AAAA,QAC1B;AAAA,QACA,cAAc;AAAA,QACd,gBAAgB;AAAA,MACpB,CAAC;AAED,WAAK,WAAW,SAAS;AAEzB,aAAO,IAAI,kBAAK,UAAU,QAAQ;AAAA,IACtC;AAAA,IAES,WAAW,MAA2B,aAAqC;AAChF,WAAK,SAAS,SAAS,SAAS,MAAM,QAAQ;AAC9C,WAAK,SAAS,SAAS,SAAS,QAAQ,YAAY;AAAA,IACxD;AAAA,IAEQ,gBAAgB,MAAY;AAChC,WAAK,SAAS,WAAW,QAAQ,KAAK,QAAQ,KAAK;AAAA,IACvD;AAAA,IAEQ,YAAY;AAEhB,WAAK,SAAS,KAAK,QAAQ,KAAK,IAAI,KAAK,uBAAU,UAAU,KAAK,OAAO,MAAM,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC;AAAA,IACvG;AAAA,IAEQ,cAAc,UAAoB;AACtC,YAAM,IAAI,KAAK,KAAK,IAAI,SAAS,OAAO,GAAG,CAAC,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;AAE7E,WAAK,SAAS,UAAU,MAAM,sBAAsB,KAAK;AAAA,IAC7D;AAAA,EACJ;AAxFI,EADS,oBACgB,KAAK;AAC9B,EAFS,oBAEgB,UAAU;AACnC,EAHS,oBAGgB,mBAAmB;;;ADvBhD,wBAAS,eAAe,CAAC,KAAK,KAAK;","names":["import_core"]}