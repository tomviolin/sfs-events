{"version":3,"sources":["@photo-sphere-viewer/core","three","src/index.ts","src/events.ts","src/MapPlugin.ts","src/components/MapComponent.ts","src/constants.ts","src/utils.ts","src/components/MapCloseButton.ts","src/icons/map.svg","src/components/AbstractMapButton.ts","src/icons/compass.svg","src/components/MapCompassButton.ts","src/icons/maximize.svg","src/icons/minimize.svg","src/components/MapMaximizeButton.ts","src/icons/reset.svg","src/components/MapResetButton.ts","src/components/MapZoomToolbar.ts","src/icons/minus.svg","src/icons/plus.svg","src/overlay.svg","src/icons/pin.svg"],"sourcesContent":["module.exports = PhotoSphereViewer","module.exports = THREE","import { DEFAULTS } from '@photo-sphere-viewer/core';\nimport * as events from './events';\n\nDEFAULTS.lang['map'] = 'Map';\nDEFAULTS.lang['mapMaximize'] = 'Maximize';\nDEFAULTS.lang['mapMinimize'] = 'Minimize';\nDEFAULTS.lang['mapNorth'] = 'Go to north';\nDEFAULTS.lang['mapReset'] = 'Reset';\n\nexport { MapPlugin } from './MapPlugin';\nexport * from './model';\nexport { events };\n\n/** @internal  */\nimport './style.scss';\n","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { MapPlugin } from './MapPlugin';\n\n/**\n * @event Triggered when the user clicks on a hotspot\n */\nexport class SelectHotspot extends TypedEvent<MapPlugin> {\n    static override readonly type = 'select-hotspot';\n    override type: 'select-hotspot';\n\n    /** @internal */\n    constructor(public readonly hotspotId: string) {\n        super(SelectHotspot.type);\n    }\n}\n\nexport type MapPluginEvents = SelectHotspot;\n","import { AbstractConfigurablePlugin, events, Point, utils, Viewer } from '@photo-sphere-viewer/core';\nimport type { Marker, events as markersEvents, MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport { Color } from 'three';\nimport { MapComponent } from './components/MapComponent';\nimport { HOTSPOT_GENERATED_ID, HOTSPOT_MARKER_ID, MARKER_DATA_KEY } from './constants';\nimport { MapPluginEvents } from './events';\nimport overlay from './overlay.svg';\nimport pin from './icons/pin.svg';\nimport { MapHotspot, MapPluginConfig, ParsedMapPluginConfig, UpdatableMapPluginConfig } from './model';\n\nconst getConfig = utils.getConfigParser<MapPluginConfig, ParsedMapPluginConfig>(\n    {\n        imageUrl: null,\n        center: null,\n        rotation: 0,\n        size: '200px',\n        position: ['bottom', 'left'],\n        visibleOnLoad: true,\n        overlayImage: overlay,\n        pinImage: pin,\n        pinSize: 35,\n        coneColor: '#1E78E6',\n        coneSize: 40,\n        spotStyle: {\n            size: 15,\n            image: null,\n            color: 'white',\n            hoverSize: null,\n            hoverImage: null,\n            hoverColor: null,\n            hoverBorderSize: 4,\n            hoverBorderColor: 'rgba(255, 255, 255, 0.6)',\n        },\n        static: false,\n        defaultZoom: 100,\n        minZoom: 20,\n        maxZoom: 200,\n        hotspots: [],\n        buttons: {\n            maximize: true,\n            close: true,\n            reset: true,\n            north: true,\n        },\n    },\n    {\n        spotStyle: (spotStyle, { defValue }) => ({ ...defValue, ...spotStyle }),\n        position: (position, { defValue }) => {\n            return utils.cleanCssPosition(position, { allowCenter: false, cssOrder: true }) || defValue;\n        },\n        rotation: (rotation) => utils.parseAngle(rotation),\n        coneColor: (coneColor) => (coneColor ? new Color(coneColor).getStyle() : null),\n        defaultZoom: (defaultZoom) => Math.log(defaultZoom / 100),\n        maxZoom: (maxZoom) => Math.log(maxZoom / 100),\n        minZoom: (minZoom) => Math.log(minZoom / 100),\n        buttons: (buttons, { defValue }) => ({ ...defValue, ...buttons }),\n    }\n);\n\n/**\n * Adds a minimap on the viewer\n */\nexport class MapPlugin extends AbstractConfigurablePlugin<\n    MapPluginConfig,\n    ParsedMapPluginConfig,\n    UpdatableMapPluginConfig,\n    MapPluginEvents\n> {\n    static override readonly id = 'map';\n    static override readonly VERSION = PKG_VERSION;\n    static override readonly configParser = getConfig;\n    static override readonly readonlyOptions: Array<keyof MapPluginConfig> = [\n        'imageUrl',\n        'visibleOnLoad',\n        'defaultZoom',\n        'buttons',\n    ];\n\n    private markers?: MarkersPlugin;\n    readonly component: MapComponent;\n\n    constructor(viewer: Viewer, config: MapPluginConfig) {\n        super(viewer, config);\n\n        this.component = new MapComponent(this.viewer, this);\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        utils.checkStylesheet(this.viewer.container, 'map-plugin');\n\n        this.markers = this.viewer.getPlugin('markers');\n\n        this.viewer.addEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ZoomUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.addEventListener(events.ReadyEvent.type, this, { once: true });\n        this.markers?.addEventListener('set-markers', this);\n\n        this.setHotspots(this.config.hotspots, false);\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(events.PositionUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.ZoomUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.SizeUpdatedEvent.type, this);\n        this.viewer.removeEventListener(events.ReadyEvent.type, this);\n        this.markers?.removeEventListener('set-markers', this);\n\n        this.component.destroy();\n\n        delete this.markers;\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case events.ReadyEvent.type:\n                this.component.reload(this.config.imageUrl);\n                break;\n            case events.PositionUpdatedEvent.type:\n            case events.ZoomUpdatedEvent.type:\n                this.component.update();\n                break;\n            case events.SizeUpdatedEvent.type:\n                if (this.component.maximized) {\n                    this.component.update();\n                }\n                break;\n            case 'set-markers':\n                this.component.setMarkers(this.__markersToHotspots((e as markersEvents.SetMarkersEvent).markers));\n                break;\n            default:\n                break;\n        }\n    }\n\n    override setOptions(options: Partial<UpdatableMapPluginConfig>) {\n        super.setOptions(options);\n\n        if (options.center) {\n            this.component.recenter();\n        }\n        if (options.hotspots !== undefined) {\n            this.setHotspots(options.hotspots);\n        }\n\n        this.component.applyConfig();\n    }\n\n    /**\n     * Hides the map\n     */\n    hide() {\n        this.component.hide();\n    }\n\n    /**\n     * Shows the map\n     */\n    show() {\n        this.component.show();\n    }\n\n    /**\n     * Closes the map\n     */\n    close() {\n        if (!this.component.collapsed) {\n            this.component.toggleCollapse();\n        }\n    }\n\n    /**\n     * Open the map\n     */\n    open() {\n        if (this.component.collapsed) {\n            this.component.toggleCollapse();\n        }\n    }\n\n    /**\n     * Minimizes the map\n     */\n    minimize() {\n        if (this.component.maximized) {\n            this.component.toggleMaximized();\n        }\n    }\n\n    /**\n     * Maximizes the map\n     */\n    maximize() {\n        if (!this.component.maximized) {\n            this.component.toggleMaximized();\n        }\n    }\n\n    /**\n     * Changes the image of the map\n     * @param rotation Also change the image rotation\n     * @param center Also change the position on the map\n     */\n    setImage(url: string, center?: Point, rotation?: string | number) {\n        if (!utils.isNil(rotation)) {\n            this.config.rotation = utils.parseAngle(rotation);\n        }\n        if (!utils.isNil(center)) {\n            this.config.center = center;\n        }\n        this.component.reload(url);\n    }\n\n    /**\n     * Changes the position on the map\n     */\n    setCenter(center: Point) {\n        this.config.center = center;\n        this.component.recenter();\n    }\n\n    /**\n     * Changes the hotspots on the map\n     */\n    setHotspots(hotspots: MapHotspot[], render = true) {\n        const ids: string[] = [];\n        let i = 1;\n\n        hotspots?.forEach((hotspot) => {\n            if (!hotspot.id) {\n                hotspot.id = HOTSPOT_GENERATED_ID + i++;\n            } else if (ids.includes(hotspot.id)) {\n                utils.logWarn(`Duplicated hotspot id \"${hotspot.id}`);\n            } else {\n                ids.push(hotspot.id);\n            }\n        });\n\n        this.config.hotspots = hotspots || [];\n\n        if (render) {\n            this.component.update();\n        }\n    }\n\n    /**\n     * Removes all hotspots\n     */\n    clearHotspots() {\n        this.setHotspots(null);\n    }\n\n    /**\n     * Changes the highlighted hotspot\n     */\n    setActiveHotspot(hotspotId: string) {\n        this.component.setActiveHotspot(hotspotId);\n    }\n\n    private __markersToHotspots(markers: Marker[]): MapHotspot[] {\n        return markers\n            .filter((marker) => marker.data?.[MARKER_DATA_KEY])\n            .map((marker) => {\n                const hotspot: MapHotspot = {\n                    ...marker.data[MARKER_DATA_KEY],\n                    id: HOTSPOT_MARKER_ID + marker.id,\n                    tooltip: marker.config.tooltip,\n                };\n\n                if ('distance' in hotspot) {\n                    hotspot.yaw = marker.state.position.yaw;\n                } else if (!('x' in hotspot) || !('y' in hotspot)) {\n                    utils.logWarn(`Marker #${marker.id} \"map\" data is missing position (distance or x+y)`);\n                    return null;\n                }\n\n                return hotspot;\n            })\n            .filter((h) => h);\n    }\n}\n","import type { Point, Tooltip, Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractComponent, CONSTANTS, events, SYSTEM, utils } from '@photo-sphere-viewer/core';\nimport type { MarkersPlugin } from '@photo-sphere-viewer/markers-plugin';\nimport { MathUtils } from 'three';\nimport { HOTSPOT_MARKER_ID, MAP_SHADOW_BLUR, PIN_SHADOW_BLUR, PIN_SHADOW_OFFSET } from '../constants';\nimport { SelectHotspot } from '../events';\nimport type { MapPlugin } from '../MapPlugin';\nimport { MapHotspot } from '../model';\nimport {\n    canvasShadow,\n    drawImageCentered,\n    drawImageHighDpi,\n    getImageHtml,\n    getStyle,\n    ImageSource,\n    loadImage,\n    projectPoint,\n    rgbToRgba,\n    unprojectPoint,\n} from '../utils';\nimport { MapCloseButton } from './MapCloseButton';\nimport { MapCompassButton } from './MapCompassButton';\nimport { MapMaximizeButton } from './MapMaximizeButton';\nimport { MapResetButton } from './MapResetButton';\nimport { MapZoomToolbar } from './MapZoomToolbar';\n\nexport class MapComponent extends AbstractComponent {\n    protected override readonly state = {\n        visible: false,\n        maximized: false,\n        collapsed: false,\n\n        imgScale: 1,\n        zoom: this.config.defaultZoom,\n        offset: { x: 0, y: 0 } as Point,\n\n        mouseX: null as number,\n        mouseY: null as number,\n        mousedown: false,\n        pinchDist: 0,\n        pinchAngle: 0,\n\n        hotspotPos: {} as Record<string, Point & { s: number }>,\n        hotspotId: null as string,\n        hotspotTooltip: null as Tooltip,\n        markers: [] as MapHotspot[],\n\n        forceRender: false,\n        needsUpdate: false,\n        renderLoop: null as ReturnType<typeof requestAnimationFrame>,\n\n        images: {} as Record<string, { loading: boolean; value: ImageSource }>,\n    };\n\n    private readonly canvas: HTMLCanvasElement;\n    private readonly overlay: HTMLElement;\n    private readonly resetButton: MapResetButton;\n    private readonly maximizeButton: MapMaximizeButton;\n    private readonly closeButton: MapCloseButton;\n    private readonly compassButton: MapCompassButton;\n    private readonly zoomToolbar: MapZoomToolbar;\n\n    get config() {\n        return this.plugin.config;\n    }\n\n    get maximized() {\n        return this.state.maximized;\n    }\n\n    get collapsed() {\n        return this.state.collapsed;\n    }\n\n    constructor(\n        viewer: Viewer,\n        private plugin: MapPlugin\n    ) {\n        super(viewer, {\n            className: `psv-map ${CONSTANTS.CAPTURE_EVENTS_CLASS}`,\n        });\n\n        // map + compass container\n        const canvasContainer = document.createElement('div');\n        canvasContainer.className = 'psv-map__container';\n\n        canvasContainer.addEventListener('mousedown', this);\n        window.addEventListener('mousemove', this);\n        window.addEventListener('mouseup', this);\n        canvasContainer.addEventListener('touchstart', this);\n        window.addEventListener('touchmove', this);\n        window.addEventListener('touchend', this);\n        canvasContainer.addEventListener('wheel', this);\n        viewer.addEventListener(events.KeypressEvent.type, this);\n\n        // map canvas\n        this.canvas = document.createElement('canvas');\n        this.__setCursor('move');\n        canvasContainer.appendChild(this.canvas);\n\n        // overlay\n        this.overlay = document.createElement('div');\n        this.overlay.className = 'psv-map__overlay';\n        canvasContainer.appendChild(this.overlay);\n\n        this.container.appendChild(canvasContainer);\n\n        this.container.addEventListener('transitionstart', this);\n        this.container.addEventListener('transitionend', this);\n\n        // sub-components\n        if (this.config.buttons.reset) {\n            this.resetButton = new MapResetButton(this);\n        }\n        if (this.config.buttons.maximize) {\n            this.maximizeButton = new MapMaximizeButton(this);\n        }\n        if (this.config.buttons.close) {\n            this.closeButton = new MapCloseButton(this);\n        }\n        if (this.config.buttons.north) {\n            this.compassButton = new MapCompassButton(this);\n        }\n        this.zoomToolbar = new MapZoomToolbar(this);\n\n        // render loop\n        const renderLoop = () => {\n            if (this.isVisible() && (this.state.needsUpdate || this.state.forceRender)) {\n                this.render();\n                this.state.needsUpdate = false;\n            }\n            this.state.renderLoop = requestAnimationFrame(renderLoop);\n        };\n        renderLoop();\n\n        this.applyConfig();\n        this.hide();\n\n        if (!this.config.visibleOnLoad) {\n            this.toggleCollapse();\n        }\n    }\n\n    override destroy(): void {\n        window.removeEventListener('touchmove', this);\n        window.removeEventListener('mousemove', this);\n        window.removeEventListener('touchend', this);\n        window.removeEventListener('mouseup', this);\n        this.viewer.removeEventListener(events.KeypressEvent.type, this);\n\n        cancelAnimationFrame(this.state.renderLoop);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        if (utils.getClosest(e.target as HTMLElement, `.${CONSTANTS.CAPTURE_EVENTS_CLASS}:not(.psv-map)`)) {\n            return;\n        }\n        switch (e.type) {\n            case events.KeypressEvent.type:\n                if (this.state.maximized) {\n                    this.__onKeyPress((e as events.KeypressEvent).key);\n                    e.preventDefault();\n                }\n                break;\n            case 'mousedown': {\n                const event = e as MouseEvent;\n                this.state.mouseX = event.clientX;\n                this.state.mouseY = event.clientY;\n                this.state.mousedown = true;\n                e.stopPropagation();\n                break;\n            }\n            case 'touchstart': {\n                const event = e as TouchEvent;\n                if (event.touches.length === 1) {\n                    this.state.mouseX = event.touches[0].clientX;\n                    this.state.mouseY = event.touches[0].clientY;\n                    this.state.mousedown = true;\n                } else if (event.touches.length === 2) {\n                    ({\n                        distance: this.state.pinchDist,\n                        angle: this.state.pinchAngle,\n                        center: { x: this.state.mouseX, y: this.state.mouseY },\n                    } = utils.getTouchData(event));\n                }\n                e.stopPropagation();\n                e.preventDefault();\n                break;\n            }\n            case 'mousemove': {\n                const event = e as MouseEvent;\n                if (this.state.mousedown) {\n                    this.__move(event.clientX, event.clientY);\n                    e.stopPropagation();\n                } else if (e.target === this.canvas) {\n                    this.__handleHotspots(event.clientX, event.clientY);\n                }\n                break;\n            }\n            case 'touchmove': {\n                const event = e as TouchEvent;\n                if (this.state.mousedown && event.touches.length === 1) {\n                    this.__move(event.touches[0].clientX, event.touches[0].clientY);\n                    e.stopPropagation();\n                } else if (this.state.mousedown && event.touches.length === 2) {\n                    const touchData = utils.getTouchData(event);\n                    const delta = (touchData.distance - this.state.pinchDist) / SYSTEM.pixelRatio;\n\n                    this.zoom(delta / 100);\n                    this.__move(touchData.center.x, touchData.center.y);\n\n                    if (this.state.maximized && !this.config.static) {\n                        this.viewer.dynamics.position.step({ yaw: this.state.pinchAngle - touchData.angle }, 0);\n                    }\n\n                    ({ distance: this.state.pinchDist, angle: this.state.pinchAngle } = touchData);\n                    e.stopPropagation();\n                }\n                break;\n            }\n            case 'mouseup':\n            case 'touchend': {\n                const mouse = (e as TouchEvent).changedTouches?.[0] || (e as MouseEvent);\n                if (this.state.mousedown) {\n                    this.state.mousedown = false;\n                    e.stopPropagation();\n                }\n                if (e.target === this.canvas) {\n                    this.__clickHotspot(mouse.clientX, mouse.clientY);\n                }\n                break;\n            }\n            case 'wheel': {\n                const event = e as WheelEvent;\n                const delta = event.deltaY / Math.abs(event.deltaY);\n                if (event.ctrlKey) {\n                    this.viewer.dynamics.position.step({ yaw: delta / 10 });\n                } else {\n                    this.zoom(-delta / 10);\n                }\n                e.stopPropagation();\n                e.preventDefault();\n                break;\n            }\n            case 'transitionstart':\n                this.state.forceRender = true;\n                break;\n            case 'transitionend':\n                if (!this.state.maximized) {\n                    this.overlay.style.display = '';\n                    this.recenter();\n                }\n                this.state.forceRender = false;\n                this.update();\n                break;\n        }\n    }\n\n    applyConfig() {\n        this.container.classList.remove(\n            'psv-map--top-right',\n            'psv-map--top-left',\n            'psv-map--bottom-right',\n            'psv-map--bottom-left'\n        );\n        this.container.classList.add(`psv-map--${this.config.position.join('-')}`);\n\n        this.container.style.width = this.config.size;\n        this.container.style.height = this.config.size;\n\n        this.overlay.innerHTML = getImageHtml(this.config.overlayImage);\n\n        this.resetButton?.applyConfig();\n        this.closeButton?.applyConfig();\n        this.compassButton?.applyConfig();\n        this.maximizeButton?.applyConfig();\n\n        if (this.config.static) {\n            this.compassButton?.rotate(0);\n            this.overlay.style.transform = '';\n        }\n\n        this.update();\n    }\n\n    override isVisible(): boolean {\n        return this.state.visible && !this.state.collapsed;\n    }\n\n    override show() {\n        super.show();\n        this.update();\n        if (!this.state.maximized) {\n            this.overlay.style.display = '';\n        }\n    }\n\n    override hide() {\n        super.hide();\n        this.state.forceRender = false;\n    }\n\n    /**\n     * Flag for render\n     */\n    update(clear = true) {\n        this.state.needsUpdate = true;\n\n        if (clear) {\n            // clear hotspots status\n            this.state.hotspotPos = {};\n            this.__resetHotspot();\n        }\n    }\n\n    /**\n     * Load a new map image\n     */\n    reload(url: string) {\n        delete this.state.images[this.config.imageUrl];\n        this.config.imageUrl = url;\n        this.state.imgScale = 1;\n        this.__loadImage(this.config.imageUrl, true);\n        this.recenter();\n    }\n\n    /**\n     * Clears the offset and zoom level\n     */\n    reset() {\n        this.state.zoom = this.config.defaultZoom;\n        this.recenter();\n    }\n\n    /**\n     * Clears the offset\n     */\n    recenter() {\n        this.state.offset.x = 0;\n        this.state.offset.y = 0;\n        this.update();\n    }\n\n    /**\n     * Switch collapsed mode\n     */\n    toggleCollapse() {\n        if (this.state.maximized) {\n            this.toggleMaximized();\n        }\n\n        this.state.collapsed = !this.state.collapsed;\n\n        utils.toggleClass(this.container, 'psv-map--collapsed', this.state.collapsed);\n\n        if (!this.state.collapsed) {\n            this.reset();\n        }\n\n        this.closeButton?.update();\n    }\n\n    /**\n     * Switch maximized mode\n     */\n    toggleMaximized() {\n        if (this.state.collapsed) {\n            return;\n        }\n\n        this.state.maximized = !this.state.maximized;\n\n        utils.toggleClass(this.container, 'psv-map--maximized', this.state.maximized);\n\n        if (this.state.maximized) {\n            this.overlay.style.display = 'none';\n        }\n\n        this.maximizeButton?.update();\n    }\n\n    /**\n     * Changes the zoom level\n     */\n    zoom(d: number) {\n        this.state.zoom = MathUtils.clamp(this.state.zoom + d, this.config.minZoom, this.config.maxZoom);\n        this.update();\n    }\n\n    /**\n     * Updates the markers\n     */\n    setMarkers(markers: MapHotspot[]) {\n        this.state.markers = markers;\n        this.update();\n    }\n\n    /**\n     * Changes the highlighted hotspot\n     */\n    setActiveHotspot(hotspotId: string) {\n        this.state.hotspotId = hotspotId;\n        this.update(false);\n    }\n\n    private render() {\n        if (!this.config.center) {\n            return;\n        }\n\n        // load the map image\n        const mapImage = this.__loadImage(this.config.imageUrl);\n        if (!mapImage) {\n            return;\n        }\n\n        const yaw = this.viewer.getPosition().yaw;\n        const zoom = Math.exp(this.state.zoom) / this.state.imgScale;\n        const center: Point = {\n            x: this.config.center.x * this.state.imgScale,\n            y: this.config.center.y * this.state.imgScale,\n        };\n        const offset: Point = {\n            x: this.state.offset.x * this.state.imgScale,\n            y: this.state.offset.y * this.state.imgScale,\n        };\n        const rotation = this.config.rotation;\n        const yawAndRotation = this.config.static ? 0 : yaw + rotation;\n\n        // update UI\n        if (!this.config.static) {\n            this.overlay.style.transform = `rotate(${-yawAndRotation}rad)`;\n            this.compassButton?.rotate(yawAndRotation);\n        }\n        this.zoomToolbar.setText(this.state.zoom);\n\n        // clear canvas\n        this.canvas.width = this.container.clientWidth * SYSTEM.pixelRatio;\n        this.canvas.height = this.container.clientHeight * SYSTEM.pixelRatio;\n\n        const canvasPos = utils.getPosition(this.canvas);\n        const canvasW = this.canvas.width;\n        const canvasH = this.canvas.height;\n        const canvasVirtualCenterX = canvasW / 2 / SYSTEM.pixelRatio;\n        const canvasVirtualCenterY = canvasH / 2 / SYSTEM.pixelRatio;\n\n        const context = this.canvas.getContext('2d');\n        context.clearRect(0, 0, canvasW, canvasH);\n\n        // draw the map\n        const mapW = mapImage.width;\n        const mapH = mapImage.height;\n\n        context.save();\n        context.translate(canvasW / 2, canvasH / 2);\n        context.rotate(-yawAndRotation);\n        context.scale(zoom, zoom);\n        canvasShadow(context, 0, 0, MAP_SHADOW_BLUR);\n        // prettier-ignore\n        drawImageHighDpi(\n            context,\n            mapImage,\n            -center.x - offset.x,\n            -center.y - offset.y,\n            mapW,\n            mapH\n        );\n        context.restore();\n\n        // draw the hotspots\n        [...this.config.hotspots, ...this.state.markers].forEach((hotspot: MapHotspot) => {\n            const isHover = this.state.hotspotId === hotspot.id;\n\n            const style = getStyle(this.config.spotStyle, hotspot, isHover);\n            const image = this.__loadImage(style.image);\n\n            const hotspotPos = { ...offset };\n            if ('yaw' in hotspot && 'distance' in hotspot) {\n                const angle = utils.parseAngle(hotspot.yaw) + rotation;\n                hotspotPos.x += Math.sin(-angle) * hotspot.distance * this.state.imgScale;\n                hotspotPos.y += Math.cos(-angle) * hotspot.distance * this.state.imgScale;\n            } else if ('x' in hotspot && 'y' in hotspot) {\n                hotspotPos.x += center.x - hotspot.x * this.state.imgScale;\n                hotspotPos.y += center.y - hotspot.y * this.state.imgScale;\n            } else {\n                utils.logWarn(`Hotspot ${hotspot['id']} is missing position (yaw+distance or x+y)`);\n                return;\n            }\n\n            const spotPos = projectPoint(hotspotPos, yawAndRotation, zoom);\n\n            // TODO filter out not visible\n\n            const x = canvasVirtualCenterX - spotPos.x;\n            const y = canvasVirtualCenterY - spotPos.y;\n\n            // save absolute position on the viewer\n            this.state.hotspotPos[hotspot.id] = {\n                x: x + canvasPos.x,\n                y: y + canvasPos.y,\n                s: style.size,\n            };\n\n            context.save();\n            context.translate(x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio);\n            canvasShadow(context, PIN_SHADOW_OFFSET, PIN_SHADOW_OFFSET, PIN_SHADOW_BLUR);\n            if (image) {\n                drawImageCentered(context, image, style.size);\n            } else {\n                context.fillStyle = style.color;\n                context.beginPath();\n                context.arc(0, 0, (style.size * SYSTEM.pixelRatio) / 2, 0, 2 * Math.PI);\n                context.fill();\n\n                if (style.borderColor && style.borderSize) {\n                    context.shadowColor = 'transparent';\n                    context.strokeStyle = style.borderColor;\n                    context.lineWidth = style.borderSize;\n                    context.beginPath();\n                    context.arc(0, 0, ((style.size + style.borderSize) * SYSTEM.pixelRatio) / 2, 0, 2 * Math.PI);\n                    context.stroke();\n                }\n            }\n            context.restore();\n        });\n\n        const pinImage = this.__loadImage(this.config.pinImage);\n        if (pinImage || (this.config.coneColor && this.config.coneSize)) {\n            const pinPos = projectPoint(offset, yawAndRotation, zoom);\n\n            const x = canvasVirtualCenterX - pinPos.x;\n            const y = canvasVirtualCenterY - pinPos.y;\n            const size = this.config.pinSize;\n            const angle = this.config.static ? yaw + rotation : 0;\n\n            context.save();\n            context.translate(x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio);\n            context.rotate(angle);\n\n            // draw the cone\n            if (this.config.coneColor && this.config.coneSize) {\n                const fov = MathUtils.degToRad(this.viewer.state.hFov);\n                const a1 = -Math.PI / 2 - fov / 2;\n                const a2 = a1 + fov;\n                const c = this.config.coneSize;\n\n                const grad = context.createRadialGradient(0, 0, c / 4, 0, 0, c);\n                grad.addColorStop(0, this.config.coneColor);\n                grad.addColorStop(1, rgbToRgba(this.config.coneColor, 0));\n\n                context.beginPath();\n                context.moveTo(0, 0);\n                context.lineTo(Math.cos(a1) * c, Math.sin(a1) * c);\n                context.arc(0, 0, c, a1, a2, false);\n                context.lineTo(0, 0);\n                context.fillStyle = grad;\n                context.fill();\n            }\n\n            // draw the pin\n            if (pinImage) {\n                canvasShadow(context, PIN_SHADOW_OFFSET, PIN_SHADOW_OFFSET, PIN_SHADOW_BLUR);\n                drawImageCentered(context, pinImage, size);\n            }\n\n            context.restore();\n        }\n    }\n\n    /**\n     * Applies mouse movement to the map\n     */\n    private __move(clientX: number, clientY: number) {\n        const yaw = this.viewer.getPosition().yaw;\n        const zoom = Math.exp(this.state.zoom);\n\n        const move = unprojectPoint(\n            {\n                x: this.state.mouseX - clientX,\n                y: this.state.mouseY - clientY,\n            },\n            this.config.static ? 0 : yaw + this.config.rotation,\n            zoom\n        );\n\n        this.state.offset.x += move.x;\n        this.state.offset.y += move.y;\n\n        this.update();\n\n        this.state.mouseX = clientX;\n        this.state.mouseY = clientY;\n    }\n\n    /**\n     * Finds the hotspot under the mouse\n     */\n    private __findHotspot(clientX: number, clientY: number): string {\n        const k = this.config.spotStyle.size / 2;\n\n        let hotspotId: string = null;\n        for (const [id, { x, y }] of Object.entries(this.state.hotspotPos)) {\n            if (clientX > x - k && clientX < x + k && clientY > y - k && clientY < y + k) {\n                hotspotId = id;\n                break;\n            }\n        }\n\n        return hotspotId;\n    }\n\n    /**\n     * Updates current hotspot on mouse move and displays tooltip\n     */\n    private __handleHotspots(clientX: number, clientY: number) {\n        const hotspotId = this.__findHotspot(clientX, clientY);\n\n        if (this.state.hotspotId !== hotspotId) {\n            this.__resetHotspot();\n\n            if (hotspotId) {\n                let tooltip;\n                if (hotspotId.startsWith(HOTSPOT_MARKER_ID)) {\n                    tooltip = this.state.markers.find(({ id }) => id === hotspotId)?.tooltip;\n                } else {\n                    tooltip = this.config.hotspots.find(({ id }) => id === hotspotId)?.tooltip;\n                }\n\n                if (tooltip) {\n                    if (typeof tooltip === 'string') {\n                        tooltip = { content: tooltip };\n                    }\n\n                    const hotspotPos = this.state.hotspotPos[hotspotId];\n                    const viewerPos = utils.getPosition(this.viewer.container);\n\n                    this.state.hotspotTooltip = this.viewer.createTooltip({\n                        content: tooltip.content,\n                        className: tooltip.className,\n                        left: hotspotPos.x - viewerPos.x,\n                        top: hotspotPos.y - viewerPos.y,\n                        box: {\n                            width: hotspotPos.s,\n                            height: hotspotPos.s,\n                        },\n                    });\n                }\n            }\n\n            this.setActiveHotspot(hotspotId);\n            this.__setCursor(hotspotId ? 'pointer' : 'move');\n        }\n    }\n\n    /**\n     * Dispatch event when a hotspot is clicked\n     */\n    private __clickHotspot(clientX: number, clientY: number) {\n        const hotspotId = this.__findHotspot(clientX, clientY);\n\n        if (hotspotId) {\n            this.plugin.dispatchEvent(new SelectHotspot(hotspotId));\n\n            if (hotspotId.startsWith(HOTSPOT_MARKER_ID)) {\n                const markerId = hotspotId.substring(HOTSPOT_MARKER_ID.length);\n                this.viewer.getPlugin<MarkersPlugin>('markers').gotoMarker(markerId);\n            }\n\n            if (this.maximized) {\n                this.toggleMaximized();\n            }\n        }\n\n        this.__resetHotspot();\n    }\n\n    private __resetHotspot() {\n        this.state.hotspotTooltip?.hide();\n        this.state.hotspotTooltip = null;\n        this.state.hotspotId = null;\n    }\n\n    /**\n     * Loads an image and returns the result **synchronously**.\n     * If the image is not already loaded it returns `null` and schedules a new render when the image is ready.\n     */\n    private __loadImage(url: string, isInit = false): ImageSource {\n        if (!url) {\n            return null;\n        }\n\n        if (!this.state.images[url]) {\n            const image = loadImage(url);\n\n            this.state.images[url] = {\n                loading: true,\n                value: image,\n            };\n\n            image.onload = () => {\n                if (isInit && Math.max(image.width, image.height) > SYSTEM.maxCanvasWidth) {\n                    this.state.imgScale = SYSTEM.maxCanvasWidth / Math.max(image.width, image.height);\n\n                    const buffer = document.createElement('canvas');\n                    buffer.width = image.width * this.state.imgScale;\n                    buffer.height = image.height * this.state.imgScale;\n\n                    const ctx = buffer.getContext('2d');\n                    ctx.drawImage(image, 0, 0, buffer.width, buffer.height);\n\n                    this.state.images[url].value = buffer;\n                }\n\n                this.state.images[url].loading = false;\n                this.update(false);\n\n                if (isInit) {\n                    this.show();\n                }\n            };\n\n            return null;\n        }\n\n        if (this.state.images[url].loading) {\n            return null;\n        }\n\n        return this.state.images[url].value;\n    }\n\n    private __onKeyPress(key: string) {\n        if (key === CONSTANTS.KEY_CODES.Escape) {\n            this.toggleMaximized();\n            return;\n        }\n\n        if (!this.viewer.state.keyboardEnabled) {\n            return;\n        }\n\n        let x = 0;\n        let y = 0;\n        let z = 0;\n\n        // prettier-ignore\n        switch (key) {\n            case CONSTANTS.KEY_CODES.ArrowUp: y = 1; break;\n            case CONSTANTS.KEY_CODES.ArrowDown: y = -1; break;\n            case CONSTANTS.KEY_CODES.ArrowLeft: x = 1; break;\n            case CONSTANTS.KEY_CODES.ArrowRight: x = -1; break;\n            case CONSTANTS.KEY_CODES.Plus: z = 1; break;\n            case CONSTANTS.KEY_CODES.Minus: z = -1; break;\n            case CONSTANTS.KEY_CODES.PageUp: z = 1; break;\n            case CONSTANTS.KEY_CODES.PageDown: z = -1; break;\n        }\n\n        if (x || y) {\n            this.state.mouseX = 0;\n            this.state.mouseY = 0;\n            this.__move(x * 10, y * 10);\n        }\n\n        if (z) {\n            this.zoom(z / 10);\n        }\n    }\n\n    private __setCursor(cursor: string) {\n        this.canvas.style.cursor = cursor;\n    }\n}\n","export const MARKER_DATA_KEY = 'map';\nexport const HOTSPOT_GENERATED_ID = '__generated__';\nexport const HOTSPOT_MARKER_ID = '__marker__';\n\nexport const PIN_SHADOW_OFFSET = 2;\nexport const PIN_SHADOW_BLUR = 4;\nexport const MAP_SHADOW_BLUR = 10;\n","import { Point, SYSTEM } from '@photo-sphere-viewer/core';\nimport { MapHotspotStyle } from './model';\n\nexport function loadImage(src: string): HTMLImageElement {\n    const image = document.createElement('img');\n\n    if (!src.includes('<svg')) {\n        image.src = src;\n    } else {\n        // the SVG must have it's own size, use the viewBox if not defined\n        if (!/<svg[^>]*width=\"/.test(src) && src.includes('viewBox')) {\n            const [, , , width, height] = /viewBox=\"([0-9-]+) ([0-9-]+) ([0-9]+) ([0-9]+)\"/.exec(src);\n            src = src.replace('<svg', `<svg width=\"${width}px\" height=\"${height}px\"`);\n        }\n\n        const src64 = `data:image/svg+xml;base64,${window.btoa(src)}`;\n        image.src = src64;\n    }\n\n    return image;\n}\n\nexport function getImageHtml(src: string): string {\n    if (!src) {\n        return '';\n    } else if (!src.includes('<svg')) {\n        return `<img src=\"${src}\">`;\n    } else {\n        return src;\n    }\n}\n\nexport function getStyle(defaultStyle: MapHotspotStyle, style: MapHotspotStyle, isHover: boolean) {\n    return {\n        image: isHover\n            ? style.hoverImage ?? style.image ?? defaultStyle.hoverImage ?? defaultStyle.image\n            : style.image ?? defaultStyle.image,\n        size: isHover\n            ? style.hoverSize ?? style.size ?? defaultStyle.hoverSize ?? defaultStyle.size\n            : style.size ?? defaultStyle.size,\n        color: isHover\n            ? style.hoverColor ?? style.color ?? defaultStyle.hoverColor ?? defaultStyle.color\n            : style.color ?? defaultStyle.color,\n        borderColor: isHover \n            ? style.hoverBorderColor ?? defaultStyle.hoverBorderColor \n            : null,\n        borderSize: isHover \n            ? style.hoverBorderSize ?? defaultStyle.hoverBorderSize \n            : null,\n    };\n}\n\nexport function unprojectPoint(pt: Point, yaw: number, zoom: number): Point {\n    return {\n        x: (Math.cos(yaw) * pt.x - Math.sin(yaw) * pt.y) / zoom,\n        y: (Math.sin(yaw) * pt.x + Math.cos(yaw) * pt.y) / zoom,\n    };\n}\n\nexport function projectPoint(pt: Point, yaw: number, zoom: number): Point {\n    return {\n        x: (Math.cos(-yaw) * pt.x - Math.sin(-yaw) * pt.y) * zoom,\n        y: (Math.sin(-yaw) * pt.x + Math.cos(-yaw) * pt.y) * zoom,\n    };\n}\n\nexport type ImageSource = HTMLImageElement | HTMLCanvasElement;\n\n/**\n * Setup the canvas drop shadow\n */\nexport function canvasShadow(\n    context: CanvasRenderingContext2D,\n    offsetX: number,\n    offsetY: number,\n    blur: number,\n    color = 'black'\n) {\n    context.shadowOffsetX = offsetX * SYSTEM.pixelRatio;\n    context.shadowOffsetY = offsetY * SYSTEM.pixelRatio;\n    context.shadowBlur = blur * SYSTEM.pixelRatio;\n    context.shadowColor = color;\n}\n\n/**\n * Draw an image centered\n */\nexport function drawImageCentered(context: CanvasRenderingContext2D, image: ImageSource, size: number) {\n    const w = image.width;\n    const h = image.height;\n\n    // prettier-ignore\n    drawImageHighDpi(\n        context,\n        image,\n        -size / 2,\n        -((h / w) * size) / 2,\n        size,\n        (h / w) * size\n    );\n}\n\n/**\n * Standard \"drawImage\" using devicePixelRatio\n */\nexport function drawImageHighDpi(\n    context: CanvasRenderingContext2D,\n    image: ImageSource,\n    x: number,\n    y: number,\n    w: number,\n    h: number\n) {\n    context.drawImage(\n        image,\n        0, 0,\n        image.width, image.height,\n        x * SYSTEM.pixelRatio, y * SYSTEM.pixelRatio,\n        w * SYSTEM.pixelRatio, h * SYSTEM.pixelRatio\n    );\n}\n\n/**\n * Adds the \"a\" to your \"rgb\"\n */\nexport function rgbToRgba(rgb: string, alpha: number): string {\n    return `rgba(${rgb.slice(4, -1)},${alpha})`;\n}\n","import { CONSTANTS } from '@photo-sphere-viewer/core';\nimport icon from '../icons/map.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapCloseButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.DEFAULT);\n\n        this.container.addEventListener('click', (e) => {\n            map.toggleCollapse();\n            e.stopPropagation();\n        });\n    }\n\n    override applyConfig(): void {\n        super.applyConfig();\n        this.container.classList.add('psv-map__button-close');\n    }\n\n    override update() {\n        this.container.innerHTML = this.map.collapsed ? icon : CONSTANTS.ICONS.close;\n        this.container.title = this.map.collapsed ? this.viewer.config.lang['map'] : this.viewer.config.lang.close;\n    }\n}\n","<svg viewBox=\"114 45 472 472\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"currentColor\"><path d=\"M383.6 196a67.3 67.3 0 1 0-134.5.1 67.3 67.3 0 0 0 134.5-.1zm-100.8 0a33.6 33.6 0 1 1 67.3 0 33.6 33.6 0 0 1-67.3 0z\"/><path d=\"M584 340.8a16.8 16.8 0 0 0-15.6-10.4H403.8c25.2-40.2 47-88 47-133.4A135 135 0 0 0 316.4 61.6 135 135 0 0 0 182 197c0 55.8 33 115.3 64.7 159.8L120.4 469a16.8 16.8 0 0 0 11.2 29.4H434c4.5 0 8.7-1.8 11.9-5l134.4-134.3c4.8-4.8 6.2-12 3.6-18.3zM215.5 197c0-56.1 45.2-101.8 100.8-101.8 55.6 0 100.8 45.6 100.8 101.8 0 65-57.1 144.2-100.8 192.8C273 341.7 215.6 262.3 215.6 197zM427 464.8H175.8l91.3-81.1a575.6 575.6 0 0 0 37.4 42.6 16.8 16.8 0 0 0 23.8 0c2.2-2.2 26.3-26.7 52.6-62.3h147z\"/></g><!-- Created by Ayub Irawan from Noun Project --></svg>","import { AbstractComponent } from '@photo-sphere-viewer/core';\nimport { MapComponent } from './MapComponent';\n\nexport const enum ButtonPosition {\n    DEFAULT,\n    DIAGONAL,\n    HORIZONTAL,\n    VERTICAL,\n}\n\nconst INVERT_POSITIONS: Record<string, string> = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left',\n};\n\nfunction getButtonPosition(mapPosition: [string, string], direction: ButtonPosition): [string, string] {\n    switch (direction) {\n        case ButtonPosition.DIAGONAL:\n            return [INVERT_POSITIONS[mapPosition[0]], INVERT_POSITIONS[mapPosition[1]]];\n        case ButtonPosition.HORIZONTAL:\n            return [mapPosition[0], INVERT_POSITIONS[mapPosition[1]]];\n        case ButtonPosition.VERTICAL:\n            return [INVERT_POSITIONS[mapPosition[0]], mapPosition[1]];\n        default:\n            return mapPosition;\n    }\n}\n\nexport abstract class AbstractMapButton extends AbstractComponent {\n    constructor(\n        protected map: MapComponent,\n        private position: ButtonPosition\n    ) {\n        super(map, {});\n    }\n\n    applyConfig() {\n        // prettier-ignore\n        this.container.className = `psv-map__button psv-map__button--${getButtonPosition(this.map.config.position, this.position).join('-')}`;\n        this.update();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    update() {}\n}\n","<svg viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M50,0L70,50L50,100L30,50Z M50,86L64,50L36,50Z\" fill=\"currentColor\"/></svg>","import icon from '../icons/compass.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapCompassButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.VERTICAL);\n\n        this.container.title = this.viewer.config.lang['mapNorth'];\n        this.container.innerHTML = icon;\n        this.container.querySelector('svg').style.width = '80%';\n\n        this.container.addEventListener('click', (e) => {\n            this.viewer.dynamics.position.goto({ yaw: -map.config.rotation }, 2);\n            e.stopPropagation();\n        });\n    }\n\n    rotate(angle: number) {\n        this.container.querySelector('svg').style.transform = `rotate3d(0, 0, 1, ${-angle}rad)`;\n    }\n}\n","<svg viewBox=\"95 25 510 510\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M604.2 39.8v481c0 7.8-6.1 14-14 14H358.4c-7.8 0-14-6.2-14-14s6.2-14 14-14h217.8v-453H123.8v216.7c0 7.8-6.2 14-14 14-7.9 0-14-6.2-14-14V39.8c0-7.9 6.1-14 14-14h481c7.3 0 13.4 6.1 13.4 14zm-304 304v176.4c0 7.9-6.2 14-14 14H109.8c-7.9 0-14-6.1-14-14V343.8c0-7.8 6.1-14 14-14h176.4c7.2 0 14 6.8 14 14zm-28 14H123.8v148.4h148.4zm215.6-195.4v79.5c0 7.9 6.1 14 14 14 7.8 0 14-6.1 14-14V128.2c0-7.8-6.2-14-14-14H388.6c-7.8 0-14 6.2-14 14 0 7.9 6.2 14 14 14h79L326.5 283.4a13.5 13.5 0 0 0 0 19.6c2.8 2.8 6.1 3.9 10 3.9 4 0 7.3-1.1 10.1-4z\" fill=\"currentColor\"/><!-- Created by Gregor Cresnar from Noun Project --></svg>","<svg viewBox=\"95 25 510 510\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M109.8 25.8h481c7.8 0 14 6.1 14 14v481c0 7.8-6.2 14-14 14H358.4c-7.8 0-14-6.2-14-14s6.2-14 14-14h217.8v-453H123.8v216.7c0 7.8-6.2 14-14 14-7.9 0-14-6.2-14-14V39.8c0-7.9 6.1-14 14-14zm176.4 508.4H109.8c-7.9 0-14-6.1-14-14V343.8c0-7.8 6.1-14 14-14h176.4c7.8 0 14 6.2 14 14v176.4c0 7.9-6.8 14-14 14zm-14-176.4H123.8v148.4h148.4zm64.4-191.5c-7.9 0-14 6.2-14 14v113.1c0 7.9 6.1 14 14 14h113c8 0 14-6.1 14-14s-6-14-14-14h-79.4l141-141a13.5 13.5 0 0 0 0-19.7 13.5 13.5 0 0 0-19.5 0L350.6 259.8v-79.5c0-7.8-6.2-14-14-14z\" fill=\"currentColor\"/><!-- Created by Gregor Cresnar from Noun Project --></svg>","import maximize from '../icons/maximize.svg';\nimport minimize from '../icons/minimize.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nconst ROTATION: Record<string, number> = {\n    'bottom-left': 0,\n    'bottom-right': -90,\n    'top-right': 180,\n    'top-left': 90,\n};\n\nexport class MapMaximizeButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.DIAGONAL);\n\n        this.container.addEventListener('click', (e) => {\n            map.toggleMaximized();\n            e.stopPropagation();\n        });\n    }\n\n    override update() {\n        this.container.innerHTML = this.map.maximized ? minimize : maximize;\n        this.container.querySelector('svg').style.transform = `rotate3d(0, 0, 1, ${ROTATION[this.map.config.position.join('-')]}deg)`;\n        this.container.title = this.map.maximized\n            ? this.viewer.config.lang['mapMinimize']\n            : this.viewer.config.lang['mapMaximize'];\n    }\n}\n","<svg viewBox=\"170 100 360 360\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"currentColor\"><path d=\"M518.6 269h-18.5a150.8 150.8 0 0 0-138-137.9v-20.9c0-5.8-4.7-10.6-10.5-10.6h-3.2c-5.8 0-10.6 4.8-10.6 10.6v21A150.8 150.8 0 0 0 200 269h-18.5c-5.9 0-10.6 4.7-10.6 10.6v3.2c0 5.8 4.7 10.5 10.6 10.5h18.5c6 73.4 64.6 132 138 138v18.5c0 5.8 4.7 10.6 10.5 10.6h3.2c5.8 0 10.6-4.8 10.6-10.6v-18.6c73.3-5.9 132-64.5 137.9-137.9h18.5c5.9 0 10.6-4.7 10.6-10.5v-3.2c0-5.9-4.7-10.6-10.6-10.6zM362.2 414.4v-9.8c0-5.9-4.8-10.6-10.6-10.6h-3.2c-5.8 0-10.6 4.7-10.6 10.6v9.8a134 134 0 0 1-121-121h9.8c5.9 0 10.6-4.8 10.6-10.6v-3.2c0-5.9-4.7-10.6-10.6-10.6h-9.8a134 134 0 0 1 121-121v7.5c0 5.8 4.8 10.5 10.6 10.5h3.2c5.8 0 10.6-4.7 10.6-10.5V148a134 134 0 0 1 121 121h-9.8c-5.9 0-10.6 4.7-10.6 10.6v3.2c0 5.8 4.7 10.5 10.6 10.5h9.8a134 134 0 0 1-121 121z\"/><path d=\"M355.4 222a6 6 0 0 0-10.7 0L291 320a8.3 8.3 0 0 0 9.7 12l39.2-11.7c6.6-2 13.6-2 20.2 0l39.2 11.7a8.3 8.3 0 0 0 9.7-12z\"/></g><!-- Created by muhammad benani from Noun Project --></svg>","import reset from '../icons/reset.svg';\nimport { AbstractMapButton, ButtonPosition } from './AbstractMapButton';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapResetButton extends AbstractMapButton {\n    constructor(map: MapComponent) {\n        super(map, ButtonPosition.HORIZONTAL);\n\n        this.container.title = this.viewer.config.lang['mapReset'];\n        this.container.innerHTML = reset;\n        this.container.querySelector('svg').style.width = '80%';\n\n        this.container.addEventListener('click', (e) => {\n            map.reset();\n            e.stopPropagation();\n        });\n    }\n}\n","import { AbstractComponent, utils } from '@photo-sphere-viewer/core';\nimport minus from '../icons/minus.svg';\nimport plus from '../icons/plus.svg';\nimport type { MapComponent } from './MapComponent';\n\nexport class MapZoomToolbar extends AbstractComponent {\n    private readonly zoomIndicator: HTMLElement;\n    private readonly handler = new utils.PressHandler(100);\n    private time: number;\n    private animation?: ReturnType<typeof requestAnimationFrame>;\n\n    constructor(private map: MapComponent) {\n        super(map, {\n            className: 'psv-map__toolbar',\n        });\n\n        this.container.innerHTML = `${minus}<span class=\"psv-map__toolbar-text\">100%</span>${plus}`;\n\n        this.zoomIndicator = this.container.querySelector('.psv-map__toolbar-text');\n\n        const zoomButtons = this.container.querySelectorAll('svg');\n        zoomButtons[0].dataset['delta'] = '-1';\n        zoomButtons[1].dataset['delta'] = '1';\n\n        this.container.addEventListener('mousedown', this);\n        window.addEventListener('mouseup', this);\n        this.container.addEventListener('touchstart', this);\n        window.addEventListener('touchend', this);\n    }\n\n    override destroy(): void {\n        window.removeEventListener('mouseup', this);\n        window.removeEventListener('touchend', this);\n\n        super.destroy();\n    }\n\n    handleEvent(e: Event) {\n        switch (e.type) {\n            case 'mousedown':\n            case 'touchstart': {\n                const button = utils.getClosest(e.target as HTMLElement, 'svg');\n                const delta: string = button?.dataset['delta'];\n                if (delta) {\n                    cancelAnimationFrame(this.animation);\n                    this.handler.down();\n                    this.time = performance.now();\n                    this.animateZoom(parseInt(delta, 10));\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                break;\n            }\n            case 'mouseup':\n            case 'touchend':\n                if (this.animation) {\n                    this.handler.up(() => {\n                        cancelAnimationFrame(this.animation);\n                        this.animation = null;\n                    });\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    setText(zoom: number) {\n        this.zoomIndicator.innerText = `${Math.round(Math.exp(zoom) * 100)}%`;\n    }\n\n    private animateZoom(delta: number) {\n        this.animation = requestAnimationFrame((t) => {\n            this.map.zoom((delta * (t - this.time)) / 1000);\n            this.time = t;\n            this.animateZoom(delta);\n        });\n    }\n}\n","<svg viewBox=\"128 58 444 444\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"currentColor\" d=\"M350 58.2a221.8 221.8 0 1 0 0 443.6 221.8 221.8 0 0 0 0-443.6zm130.3 252.7H219.7a31 31 0 1 1 0-61.8h260.6a31 31 0 1 1 0 61.8z\"/><!-- Created by Iconika from Noun Project --></svg>","<svg viewBox=\"143.8 73.8 412.5 412.5\" xmlns=\"http://www.w3.org/2000/svg\"><path fill=\"currentColor\" d=\"M350 73.8a206.2 206.2 0 1 0 0 412.4 206.2 206.2 0 0 0 0-412.4zm117.3 234H378v89.5a27.9 27.9 0 1 1-55.8 0V308h-89.4a27.9 27.9 0 1 1 0-55.8H322v-89.5a27.9 27.9 0 1 1 55.8 0v89.5h89.5a27.9 27.9 0 1 1 0 55.8z\"/><!-- Created by Iconika from Noun Project --></svg>","<svg viewBox=\"0 0 500 500\" xmlns=\"http://www.w3.org/2000/svg\">\n    <defs>\n        <radialGradient id=\"gradient\">\n            <stop offset=\"80%\" stop-color=\"rgba(255, 255, 255, 0)\"/>\n            <stop offset=\"90%\" stop-color=\"rgba(255, 255, 255, .5)\"/>\n        </radialGradient>\n    </defs>\n    <circle cx=\"250\" cy=\"250\" r=\"250\" fill=\"url(#gradient)\"/>\n    <circle cx=\"250\" cy=\"250\" r=\"245\" fill=\"none\" stroke=\"rgba(255, 255, 255, 0.8)\" stroke-width=\"10\"/>\n    <g fill=\"#222\">\n        <rect x=\"1\" y=\"248\" width=\"18\" height=\"4\"/>\n        <rect x=\"481\" y=\"248\" width=\"18\" height=\"4\"/>\n        <rect x=\"248\" y=\"1\" width=\"4\" height=\"18\"/>\n        <rect x=\"248\" y=\"481\" width=\"4\" height=\"18\"/>\n    </g>\n</svg>","<svg viewBox=\"-20 -20 740 740\" xmlns=\"http://www.w3.org/2000/svg\">\n    <circle cx=\"350\" cy=\"350\" r=\"190\" fill=\"white\"/>\n    <circle cx=\"350\" cy=\"350\" r=\"150\" fill=\"#1E78E6\"/>\n</svg>\n"],"mappings":"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","names":["import_core","import_core","import_three","import_core","import_core","import_core","import_core","import_core"]}