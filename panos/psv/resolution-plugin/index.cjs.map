{"version":3,"sources":["src/index.ts","src/events.ts","src/ResolutionPlugin.ts"],"sourcesContent":["import { DEFAULTS } from '@photo-sphere-viewer/core';\nimport * as events from './events';\n\nDEFAULTS.lang.resolution = 'Quality';\n\nexport { ResolutionPlugin } from './ResolutionPlugin';\nexport * from './model';\nexport { events };\n","import { TypedEvent } from '@photo-sphere-viewer/core';\nimport type { ResolutionPlugin } from './ResolutionPlugin';\n\n/**\n * @event Triggered when the resolution is changed\n */\nexport class ResolutionChangedEvent extends TypedEvent<ResolutionPlugin> {\n    static override readonly type = 'resolution-changed';\n    override type: 'resolution-changed';\n\n    /** @internal */\n    constructor(public readonly resolutionId: string) {\n        super(ResolutionChangedEvent.type);\n    }\n}\n\nexport type ResolutionPluginEvents = ResolutionChangedEvent;\n","import type { Viewer } from '@photo-sphere-viewer/core';\nimport { AbstractPlugin, events, PSVError, utils } from '@photo-sphere-viewer/core';\nimport type { OptionsSetting, SettingsPlugin } from '@photo-sphere-viewer/settings-plugin';\nimport { ResolutionChangedEvent, ResolutionPluginEvents } from './events';\nimport { Resolution, ResolutionPluginConfig } from './model';\n\nconst getConfig = utils.getConfigParser<ResolutionPluginConfig>({\n    resolutions: null,\n    defaultResolution: null,\n    showBadge: true,\n});\n\n/**\n *  Adds a setting to choose between multiple resolutions of the panorama.\n */\nexport class ResolutionPlugin extends AbstractPlugin<ResolutionPluginEvents> {\n    static override readonly id = 'resolution';\n    static override readonly VERSION = PKG_VERSION;\n\n    readonly config: ResolutionPluginConfig;\n\n    private resolutions: Resolution[] = [];\n    private resolutionsById: Record<string, Resolution> = {};\n\n    private readonly state = {\n        resolution: null as string,\n    };\n\n    private settings: SettingsPlugin;\n\n    constructor(viewer: Viewer, config: ResolutionPluginConfig) {\n        super(viewer);\n\n        this.config = getConfig(config);\n\n        if (this.config.defaultResolution && this.viewer.config.panorama) {\n            utils.logWarn(\n                'ResolutionPlugin, a defaultResolution was provided ' +\n                    'but a panorama is already configured on the viewer, ' +\n                    'the defaultResolution will be ignored.'\n            );\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override init() {\n        super.init();\n\n        this.settings = this.viewer.getPlugin('settings');\n\n        if (!this.settings) {\n            throw new PSVError('Resolution plugin requires the Settings plugin');\n        }\n\n        this.settings.addSetting({\n            id: ResolutionPlugin.id,\n            type: 'options',\n            label: this.viewer.config.lang.resolution,\n            current: () => this.state.resolution,\n            options: () => this.resolutions,\n            apply: (resolution) => this.__setResolutionIfExists(resolution),\n            badge: !this.config.showBadge ? null : () => this.state.resolution,\n        } as OptionsSetting);\n\n        this.viewer.addEventListener(events.PanoramaLoadedEvent.type, this);\n\n        if (this.config.resolutions) {\n            this.setResolutions(\n                this.config.resolutions,\n                this.viewer.config.panorama ? null : this.config.defaultResolution\n            );\n            delete this.config.resolutions;\n            delete this.config.defaultResolution;\n        }\n    }\n\n    /**\n     * @internal\n     */\n    override destroy() {\n        this.viewer.removeEventListener(events.PanoramaLoadedEvent.type, this);\n\n        this.settings.removeSetting(ResolutionPlugin.id);\n\n        super.destroy();\n    }\n\n    /**\n     * @internal\n     */\n    handleEvent(e: Event) {\n        if (e instanceof events.PanoramaLoadedEvent) {\n            this.__refreshResolution();\n        }\n    }\n\n    /**\n     * Changes the available resolutions\n     * @param resolutions\n     * @param defaultResolution - if not provided, the current panorama is kept\n     * @throws {@link PSVError} if the configuration is invalid\n     */\n    setResolutions(resolutions: Resolution[], defaultResolution?: string) {\n        this.resolutions = resolutions || [];\n        this.resolutionsById = {};\n\n        resolutions.forEach((resolution) => {\n            if (!resolution.id) {\n                throw new PSVError('Missing resolution id');\n            }\n            if (!resolution.panorama) {\n                throw new PSVError('Missing resolution panorama');\n            }\n            this.resolutionsById[resolution.id] = resolution;\n        });\n\n        // pick first resolution if no default provided and no current panorama\n        if (!this.viewer.config.panorama && !defaultResolution) {\n            defaultResolution = resolutions[0].id;\n        }\n\n        // ensure the default resolution exists\n        if (defaultResolution && !this.resolutionsById[defaultResolution]) {\n            utils.logWarn(`Resolution ${defaultResolution} unknown`);\n            defaultResolution = resolutions[0].id;\n        }\n\n        if (defaultResolution) {\n            this.setResolution(defaultResolution);\n        }\n\n        this.__refreshResolution();\n    }\n\n    /**\n     * Changes the current resolution\n     * @throws {@link PSVError} if the resolution does not exist\n     */\n    setResolution(id: string): Promise<unknown> {\n        if (!this.resolutionsById[id]) {\n            throw new PSVError(`Resolution ${id} unknown`);\n        }\n\n        return this.__setResolutionIfExists(id);\n    }\n\n    private __setResolutionIfExists(id: string): Promise<unknown> {\n        if (this.resolutionsById[id]) {\n            return this.viewer.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    /**\n     * Returns the current resolution\n     */\n    getResolution(): string {\n        return this.state.resolution;\n    }\n\n    /**\n     * Updates current resolution on panorama load\n     */\n    private __refreshResolution() {\n        const resolution = this.resolutions.find((r) => utils.deepEqual(this.viewer.config.panorama, r.panorama));\n        if (this.state.resolution !== resolution?.id) {\n            this.state.resolution = resolution?.id;\n            this.settings?.updateButton();\n            this.dispatchEvent(new ResolutionChangedEvent(this.state.resolution));\n        }\n    }\n}\n"],"mappings":"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","names":["import_core","import_core"]}